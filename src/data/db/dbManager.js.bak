// Database Manager for Time Tracker App
// Path: src/data/db/dbManager.js

const fs = require('fs');
const path = require('path');
const sqlite = require('better-sqlite3');
const { app } = require('electron');

class DatabaseManager {
  constructor() {
    this.db = null;
    this.initialized = false;
  }

  /**
   * Initialize the database connection and create tables if they don't exist
   */
  initialize() {
    if (this.initialized) return;

    try {
      // Create database directory if it doesn't exist
      const userDataPath = app.getPath('userData');
      const dbPath = path.join(userDataPath, 'database');
      
      if (!fs.existsSync(dbPath)) {
        fs.mkdirSync(dbPath, { recursive: true });
      }
      
      // Connect to the SQLite database
      const dbFile = path.join(dbPath, 'timetracker.db');
      this.db = new sqlite(dbFile);
      
      // Enable foreign keys
      this.db.pragma('foreign_keys = ON');
      
      // Load and execute schema SQL
      const schemaPath = path.join(__dirname, 'schema.sql');
      const schema = fs.readFileSync(schemaPath, 'utf8');
      
      // Execute each statement in the schema
      schema.split(';').forEach(statement => {
        if (statement.trim()) {
          this.db.prepare(statement).run();
        }
      });
      
      console.log('Database initialized successfully');
      this.initialized = true;
    } catch (error) {
      console.error('Failed to initialize database:', error);
      throw error;
    }
  }

  /**
   * Get a single record by ID
   * @param {string} table - The table name
   * @param {number} id - The record ID
   * @returns {Object|null} - The record or null if not found
   */
  getById(table, id) {
    try {
      const query = `SELECT * FROM ${table} WHERE id = ?`;
      const statement = this.db.prepare(query);
      return statement.get(id) || null;
    } catch (error) {
      console.error(`Error getting ${table} record by ID:`, error);
      throw error;
    }
  }

  /**
   * Get all records from a table
   * @param {string} table - The table name
   * @returns {Array} - Array of records
   */
  getAll(table) {
    try {
      const query = `SELECT * FROM ${table}`;
      const statement = this.db.prepare(query);
      return statement.all();
    } catch (error) {
      console.error(`Error getting all ${table} records:`, error);
      throw error;
    }
  }

  /**
   * Insert a record into a table
   * @param {string} table - The table name
   * @param {Object} data - The data to insert
   * @returns {number} - The ID of the inserted record
   */
  insert(table, data) {
    try {
      const columns = Object.keys(data).join(', ');
      const placeholders = Object.keys(data).map(() => '?').join(', ');
      const values = Object.values(data);
      
      const query = `INSERT INTO ${table} (${columns}) VALUES (${placeholders})`;
      const statement = this.db.prepare(query);
      const result = statement.run(...values);
      
      return result.lastInsertRowid;
    } catch (error) {
      console.error(`Error inserting into ${table}:`, error);
      throw error;
    }
  }

  /**
   * Update a record in a table
   * @param {string} table - The table name
   * @param {number} id - The record ID
   * @param {Object} data - The data to update
   * @returns {boolean} - True if successful
   */
  update(table, id, data) {
    try {
      const setClause = Object.keys(data).map(key => `${key} = ?`).join(', ');
      const values = [...Object.values(data), id];
      
      const query = `UPDATE ${table} SET ${setClause} WHERE id = ?`;
      const statement = this.db.prepare(query);
      const result = statement.run(...values);
      
      return result.changes > 0;
    } catch (error) {
      console.error(`Error updating ${table}:`, error);
      throw error;
    }
  }

  /**
   * Delete a record from a table
   * @param {string} table - The table name
   * @param {number} id - The record ID
   * @returns {boolean} - True if successful
   */
  delete(table, id) {
    try {
      const query = `DELETE FROM ${table} WHERE id = ?`;
      const statement = this.db.prepare(query);
      const result = statement.run(id);
      
      return result.changes > 0;
    } catch (error) {
      console.error(`Error deleting from ${table}:`, error);
      throw error;
    }
  }

  /**
   * Run a custom query with parameters
   * @param {string} query - The SQL query
   * @param {Array} params - Query parameters
   * @returns {Array|Object} - Query results
   */
  runQuery(query, params = []) {
    try {
      const statement = this.db.prepare(query);
      
      // Determine if this is a SELECT query
      if (query.trim().toLowerCase().startsWith('select')) {
        return statement.all(...params);
      } else {
        return statement.run(...params);
      }
    } catch (error) {
      console.error('Error running custom query:', error);
      throw error;
    }
  }

  /**
   * Close the database connection
   */
  close() {
    if (this.db) {
      this.db.close();
      this.initialized = false;
      console.log('Database connection closed');
    }
  }
}

// Export a singleton instance
const dbManager = new DatabaseManager();
module.exports = dbManager;